---
packages:
  # Order matters!!! First has more priority then later ones
  # highest priority (after config in this file)
  # ....
  # lowest priority (should be device base)
  base: !include devices/base.yaml # in this file the esphome, api, wifi config is

external_components:
  - source: github://edenhaus/esphome-extraflame
    components: [extraflame]

uart:
  tx_pin: GPIO25
  rx_pin: GPIO26
  baud_rate: 1200
  # data_bits: 8
  # parity: NONE
  stop_bits: 2

extraflame:
http_request:

text_sensor:
  - platform: template
    name: ${name} Status
    id: oven_status

sensor:
  - platform: extraflame
    memory: RAM
    address: 0x01
    id: oven_temp
    name: Temperature
    unit_of_measurement: "°C"
    icon: "mdi:thermometer"
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 1
    filters:
      - multiply: 0.5

  - platform: extraflame
    memory: RAM
    address: 0x21
    id: oven_status_raw
    name: ${name} Status Raw
    internal: true
    update_interval: 15s
    # Values
    # 0 = Off
    # 1= Start
    # 2 = Pellet loading
    # 3 = Ignition
    # 4 = Work
    # 5 = Brazier cleaning
    # 6 = Final cleaning
    # 7= Standby
    # 8= Pellet missing alarm
    # 9= Ignition failure alarm
    # 10=Undefined alarms (to be investigated)
    on_value:
      - text_sensor.template.publish:
          id: oven_status
          state: !lambda |-
            if (x == 0) {
              return "Aus";
            } else if (x >= 1 && x <= 3) {
              return "Anzünden";
            } else if (x == 4) {
              return "Läuft";
            } else if (x == 5) {
              return "Automatische Reinigung";
            } else if (x == 6) {
              return "Ausschalten";
            } else if (x == 7) {
              return "Standby";
            } else if (x == 8) {
              return "Keine Pellets";
            } else if (x == 9) {
              return "Anzünden fehlgeschlagen";
            }
            return "Unbekannter Fehler";

  - platform: extraflame
    memory: RAM
    address: 0x37
    name: ${name} Stufe
    filters:
      # See docs
      - lambda: return ((int)x & 0x0F) - 0x8;
      #return ((int)x % 16) - 8;

button:
  - platform: template
    name: ${name} Start
    on_press:
      - logger.log: Button Anzünden
      - if:
          condition:
            lambda: return id(oven_status_raw).state == 0;
          then:
            extraflame.write:
              memory: RAM
              address: 0x21
              value: 0x01
  - platform: template
    name: ${name} Shutdown
    on_press:
      - logger.log: Button Ausschalten
      - if:
          condition:
            lambda: |-
              auto status = id(oven_status_raw).state;
              return status > 0 && status < 6;
          then:
            extraflame.write:
              memory: RAM
              address: 0x21
              value: 0x06

script:
  - id: script_dumping
    then:
      - while:
          condition:
            lambda: return true;
          then:
            - wait_until:
                not:
                  extraflame.is_dumping:
            - extraflame.dump:
                memory: RAM
                start: 0x00
                end: 0xFF
                on_dump_finish:
                  then:
                    - http_request.send:
                        method: POST
                        url: your_URL
                        headers:
                          Content-Type: application/json
                        body: !lambda return data.c_str();

switch:
  - platform: template
    name: "Dumping"
    lambda: |-
      return id(script_dumping).is_running();
    turn_on_action:
      if:
        condition:
          not:
            script.is_running: script_dumping
        then:
          script.execute: script_dumping
    turn_off_action:
      script.stop: script_dumping